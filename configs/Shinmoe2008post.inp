% =========================================================================
% Geodetic Bayesian Inversion Software (GBIS)
% Software for the Bayesian inversion of geodetic data.
% Copyright: Marco Bagnardi, 2018
%
% Email: gbis.software@gmail.com
%
% Reference: 
% Bagnardi M. & Hooper A, (2018). 
% Inversion of surface deformation data for rapid estimates of source 
% parameters and uncertainties: A Bayesian approach. Geochemistry, 
% Geophysics, Geosystems, 19. https://doi.org/10.1029/2018GC007585
%
% =========================================================================
% Last update: 8 August, 2018

% INPUT FILE

%% Reference point and Area of interest
geo.referencePoint = [130.88; 31.91];    % Longitude and Latitude in degrees for arbitrary reference point of local coordinates system [Lon; Lat;]
geo.boundingBox = [130.85; 31.94; 130.91; 31.88;];  % Coordinates in degrees of upper left and lower right limits of area of interest [UL_Lon,UL_Lat,LR_Lon,LR_Lat] [W; N; E; S]

%% InSAR data
% Make sure insarID is unique!

insarID = 1;                            % InSAR dataset unique identifier

insar{insarID}.dataPath = '/Users/yunjunz/insarlab/Kirishima/Model/data/ShinmoeAlosDT73_20081012_20100302.mat'; % Path to data file

insar{insarID}.wavelength = 0.236;      % Wavelength in m (e.g., Envisat/ERS/Sentinel: 0.056; CSK/TSX/TDX: 0.031)

insar{insarID}.constOffset = 'y';       % Remove constant offset? 'y' or 'n'

insar{insarID}.rampFlag = 'n';          % Remove ramp? 'y' or 'n'

insar{insarID}.sillExp = 1.9e-05;       % Variogram sill in m^2

insar{insarID}.range = 710;             % Variogram range in m

insar{insarID}.nugget = 8.0e-07;          % Variogram nugget in m

insar{insarID}.quadtreeThresh = 0.0025^2;  %0.00375^2 Quadtree threshold variance (e.g., 0.01^2 m or 1e-04 m)

insar{insarID}.quadtreeBox = [130.864; 31.923; 130.902; 31.895;];  % WNES coordinates in degrees for area of interest

insar{insarID}.gridStep = 750;          % grid step in m

%%

insarID = 2;                            % InSAR dataset unique identifier

insar{insarID}.dataPath = '/Users/yunjunz/insarlab/Kirishima/Model/data/ShinmoeAlosAT424_20080929_20100520.mat'; % Path to data file

insar{insarID}.wavelength = 0.236;      % Wavelength in m (e.g., Envisat/ERS/Sentinel: 0.056; CSK/TSX/TDX: 0.031)

insar{insarID}.constOffset = 'y';       % Remove constant offset? 'y' or 'n'

insar{insarID}.rampFlag = 'n';          % Remove ramp? 'y' or 'n'

insar{insarID}.sillExp = 1.6e-05;      % Variogram sill in m^2

insar{insarID}.range = 1100;            % Variogram range in m

insar{insarID}.nugget = 1.4e-06;          % Variogram nugget in m

insar{insarID}.quadtreeThresh = 0.002^2;  % Quadtree threshold variance (e.g., 0.01^2 m or 1e-04 m)

insar{insarID}.quadtreeBox = [130.865; 31.925; 130.900; 31.894;];  % WNES coordinates in degrees for area of interest

insar{insarID}.gridStep = 750;          % grid step in m

%% GPS data

gps.dataPath = '/Users/yunjunz/development/matlab/GBIS_V1.1/Example/Data/GPS_data.txt';   % Path to GPS data file
gps.weight = 1/1;    % Weight of GPS data vs. InSAR data in inversion (e.g., 10/1)

%% Model parameters
modelInput.nu = 0.25;       % Poisson's ratio (Shear modulus is set to 1)

% Mogi 'M'
%                             X       Y      Z      DV
modelInput.mogi.start = [  400;   300;    450;    -5e4; ];      % starting model
modelInput.mogi.step =  [   50;    50;     10;     1e4; ];      % initial maximum step size
modelInput.mogi.lower = [    0;  -200;    100;    -1e8; ];      % lower bounds on m
modelInput.mogi.upper = [  800;   600;    900;    -1e2; ];      % upper bounds on m

% McTigue 'T'
%                                X       Y      Z     R   DP/mu
modelInput.mctigue.start = [   400;    300;   450;  100; -5e-4; ];  % starting model
modelInput.mctigue.step  = [    50;     50;    10;  100;  1e-3; ];  % initial maximum step size
modelInput.mctigue.lower = [     0;      0;   100;  0.1;  -1e0; ];  % lower bounds on m
modelInput.mctigue.upper = [  1000;   1000;   900;  500; -1e-8; ];  % upper bounds on m

% Yang 'Y'
%                             X       Y      Z      a     b/a    Str    Pln    DP/mu
modelInput.yang.start = [   400;    300;   450;   300;    0.5;    1;  -89.9;  -1e-4;];    % starting model
modelInput.yang.step =  [    50;     50;    10;    50;   0.01;    1;      1;   1e-3;];    % initial maximum step size
modelInput.yang.lower = [  -200;   -400;   100;     1;   0.01; -100; -150.0;  -1e-0;];    % lower bounds on m
modelInput.yang.upper = [  1000;   1000;   900;  1000;   0.99;   60;  -30.0;  -1e-8;];    % upper bounds on m

% Compound Dislocation Model (Nikhoo) 'C'
%                            X      Y      Z    omegaX  omegaY  omegaZ   ax      ay      az     opening
modelInput.cdmn.start = [   400;   300;   450;     0;      0;     20;    50;     50;     50;     -0.1;];  % starting model
modelInput.cdmn.step  = [    50;    50;    10;     1;      1;      1;    10;     10;     10;     0.01;];  % initial maximium step size
modelInput.cdmn.lower = [  -200;  -400;   100;   -60;    -60;      0;   0.1;    0.1;    0.1;    -10.0;];  % lower bounds on m
modelInput.cdmn.upper = [  1000;  1000;   900;    30;     30;    180;  1000;   1000;   1000;    -1e-5;];  % upper bounds on m

% Point Compound Dislocation Model (Nikhoo) 'N'
%                            X     Y      Z     omegaX  omegaY omegaZ  DVx     DVy      DVz
modelInput.pcdm.start = [   400;   300;   450;     0;     0;     20;  -500;   -500;   -500;];  % starting model
modelInput.pcdm.step  = [    50;    50;    10;     1;     1;      1;    10;     10;     10;];  % initial maximium step size
modelInput.pcdm.lower = [  -200;  -400;   100;   -90;   -45;      0;  -1e6;   -1e6;   -1e6;];  % lower bounds on m
modelInput.pcdm.upper = [  1000;  1000;   900;     0;    45;     90;  -0.1;   -0.1;   -0.1;];  % upper bounds on m

% Penny-shaped crack 'P'
%                              X       Y      Z     R    DP/mu
modelInput.penny.start = [   400;    300;   450;  100;  -5e-4; ];    % starting model
modelInput.penny.step =  [    50;     50;    10;  100;   1e-3; ];    % initial maximum step size
modelInput.penny.lower = [  -200;   -400;   100;   10;  -1e-1; ];    % lower bounds on m
modelInput.penny.upper = [  1000;   1000;   900;  500;  -1e-8; ];    % upper bounds on m
